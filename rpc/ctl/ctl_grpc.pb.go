// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CtlClient is the client API for Ctl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CtlClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateTransformFunction(ctx context.Context, in *CreateTransformFunctionRequest, opts ...grpc.CallOption) (*CreateTransformFunctionResponse, error)
	DeleteTransformFunction(ctx context.Context, in *DeleteTransformFunctionRequest, opts ...grpc.CallOption) (*DeleteTransformFunctionResponse, error)
	UpdateTransformFunction(ctx context.Context, in *UpdateTransformFunctionRequest, opts ...grpc.CallOption) (*UpdateTransformFunctionResponse, error)
	GetTransformFunction(ctx context.Context, in *GetTransformFunctionRequest, opts ...grpc.CallOption) (*GetTransformFunctionResponse, error)
	GetTransformFunctions(ctx context.Context, in *GetTransformFunctionsRequest, opts ...grpc.CallOption) (*GetTransformFunctionsResponse, error)
	UpdateExtractRule(ctx context.Context, in *UpdateExtractRuleRequest, opts ...grpc.CallOption) (*UpdateExtractRuleResponse, error)
	DeleteExtractRule(ctx context.Context, in *DeleteExtractRuleRequest, opts ...grpc.CallOption) (*DeleteExtractRuleResponse, error)
	CreateExtractRule(ctx context.Context, in *CreateExtractRuleRequest, opts ...grpc.CallOption) (*CreateExtractRuleResponse, error)
	GetExtractRule(ctx context.Context, in *GetExtractRuleRequest, opts ...grpc.CallOption) (*GetExtractRuleResponse, error)
	GetExtractRules(ctx context.Context, in *GetExtractRulesRequest, opts ...grpc.CallOption) (*GetExtractRulesResponse, error)
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*UpdateExtensionResponse, error)
	DeleteExtension(ctx context.Context, in *DeleteExtensionRequest, opts ...grpc.CallOption) (*DeleteExtensionResponse, error)
	CreateExtension(ctx context.Context, in *CreateExtensionRequest, opts ...grpc.CallOption) (*CreateExtensionResponse, error)
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*GetExtensionResponse, error)
	GetExtensions(ctx context.Context, in *GetExtensionsRequest, opts ...grpc.CallOption) (*GetExtensionsResponse, error)
	UpdateExtractSource(ctx context.Context, in *UpdateExtractSourceRequest, opts ...grpc.CallOption) (*UpdateExtractSourceResponse, error)
	DeleteExtractSource(ctx context.Context, in *DeleteExtractSourceRequest, opts ...grpc.CallOption) (*DeleteExtractSourceResponse, error)
	GetExtractSource(ctx context.Context, in *GetExtractSourceRequest, opts ...grpc.CallOption) (*GetExtractSourceResponse, error)
	GetExtractSources(ctx context.Context, in *GetExtractSourcesRequest, opts ...grpc.CallOption) (*GetExtractSourcesResponse, error)
	CreateExtractSource(ctx context.Context, in *CreateExtractSourceRequest, opts ...grpc.CallOption) (*CreateExtractSourceResponse, error)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	GetPipelineStatus(ctx context.Context, in *GetPipelineStatusRequest, opts ...grpc.CallOption) (*GetPipelineStatusResponse, error)
	DeleteJobs(ctx context.Context, in *DeleteJobsRequest, opts ...grpc.CallOption) (*DeleteJobsResponse, error)
	GetPipelineJobLog(ctx context.Context, in *GetPipelineJobLogRequest, opts ...grpc.CallOption) (*GetPipelineJobLogResponse, error)
	GetExtractData(ctx context.Context, in *GetExtractDataRequest, opts ...grpc.CallOption) (*GetExtractDataResponse, error)
}

type ctlClient struct {
	cc grpc.ClientConnInterface
}

func NewCtlClient(cc grpc.ClientConnInterface) CtlClient {
	return &ctlClient{cc}
}

func (c *ctlClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) CreateTransformFunction(ctx context.Context, in *CreateTransformFunctionRequest, opts ...grpc.CallOption) (*CreateTransformFunctionResponse, error) {
	out := new(CreateTransformFunctionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/CreateTransformFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) DeleteTransformFunction(ctx context.Context, in *DeleteTransformFunctionRequest, opts ...grpc.CallOption) (*DeleteTransformFunctionResponse, error) {
	out := new(DeleteTransformFunctionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/DeleteTransformFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) UpdateTransformFunction(ctx context.Context, in *UpdateTransformFunctionRequest, opts ...grpc.CallOption) (*UpdateTransformFunctionResponse, error) {
	out := new(UpdateTransformFunctionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/UpdateTransformFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetTransformFunction(ctx context.Context, in *GetTransformFunctionRequest, opts ...grpc.CallOption) (*GetTransformFunctionResponse, error) {
	out := new(GetTransformFunctionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetTransformFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetTransformFunctions(ctx context.Context, in *GetTransformFunctionsRequest, opts ...grpc.CallOption) (*GetTransformFunctionsResponse, error) {
	out := new(GetTransformFunctionsResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetTransformFunctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) UpdateExtractRule(ctx context.Context, in *UpdateExtractRuleRequest, opts ...grpc.CallOption) (*UpdateExtractRuleResponse, error) {
	out := new(UpdateExtractRuleResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/UpdateExtractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) DeleteExtractRule(ctx context.Context, in *DeleteExtractRuleRequest, opts ...grpc.CallOption) (*DeleteExtractRuleResponse, error) {
	out := new(DeleteExtractRuleResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/DeleteExtractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) CreateExtractRule(ctx context.Context, in *CreateExtractRuleRequest, opts ...grpc.CallOption) (*CreateExtractRuleResponse, error) {
	out := new(CreateExtractRuleResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/CreateExtractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtractRule(ctx context.Context, in *GetExtractRuleRequest, opts ...grpc.CallOption) (*GetExtractRuleResponse, error) {
	out := new(GetExtractRuleResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtractRules(ctx context.Context, in *GetExtractRulesRequest, opts ...grpc.CallOption) (*GetExtractRulesResponse, error) {
	out := new(GetExtractRulesResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtractRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*UpdateExtensionResponse, error) {
	out := new(UpdateExtensionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/UpdateExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) DeleteExtension(ctx context.Context, in *DeleteExtensionRequest, opts ...grpc.CallOption) (*DeleteExtensionResponse, error) {
	out := new(DeleteExtensionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/DeleteExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) CreateExtension(ctx context.Context, in *CreateExtensionRequest, opts ...grpc.CallOption) (*CreateExtensionResponse, error) {
	out := new(CreateExtensionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/CreateExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*GetExtensionResponse, error) {
	out := new(GetExtensionResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtensions(ctx context.Context, in *GetExtensionsRequest, opts ...grpc.CallOption) (*GetExtensionsResponse, error) {
	out := new(GetExtensionsResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) UpdateExtractSource(ctx context.Context, in *UpdateExtractSourceRequest, opts ...grpc.CallOption) (*UpdateExtractSourceResponse, error) {
	out := new(UpdateExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/UpdateExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) DeleteExtractSource(ctx context.Context, in *DeleteExtractSourceRequest, opts ...grpc.CallOption) (*DeleteExtractSourceResponse, error) {
	out := new(DeleteExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/DeleteExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtractSource(ctx context.Context, in *GetExtractSourceRequest, opts ...grpc.CallOption) (*GetExtractSourceResponse, error) {
	out := new(GetExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtractSources(ctx context.Context, in *GetExtractSourcesRequest, opts ...grpc.CallOption) (*GetExtractSourcesResponse, error) {
	out := new(GetExtractSourcesResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtractSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) CreateExtractSource(ctx context.Context, in *CreateExtractSourceRequest, opts ...grpc.CallOption) (*CreateExtractSourceResponse, error) {
	out := new(CreateExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/CreateExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetPipelineStatus(ctx context.Context, in *GetPipelineStatusRequest, opts ...grpc.CallOption) (*GetPipelineStatusResponse, error) {
	out := new(GetPipelineStatusResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetPipelineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) DeleteJobs(ctx context.Context, in *DeleteJobsRequest, opts ...grpc.CallOption) (*DeleteJobsResponse, error) {
	out := new(DeleteJobsResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/DeleteJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetPipelineJobLog(ctx context.Context, in *GetPipelineJobLogRequest, opts ...grpc.CallOption) (*GetPipelineJobLogResponse, error) {
	out := new(GetPipelineJobLogResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetPipelineJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctlClient) GetExtractData(ctx context.Context, in *GetExtractDataRequest, opts ...grpc.CallOption) (*GetExtractDataResponse, error) {
	out := new(GetExtractDataResponse)
	err := c.cc.Invoke(ctx, "/ctl.Ctl/GetExtractData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CtlServer is the server API for Ctl service.
// All implementations should embed UnimplementedCtlServer
// for forward compatibility
type CtlServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateTransformFunction(context.Context, *CreateTransformFunctionRequest) (*CreateTransformFunctionResponse, error)
	DeleteTransformFunction(context.Context, *DeleteTransformFunctionRequest) (*DeleteTransformFunctionResponse, error)
	UpdateTransformFunction(context.Context, *UpdateTransformFunctionRequest) (*UpdateTransformFunctionResponse, error)
	GetTransformFunction(context.Context, *GetTransformFunctionRequest) (*GetTransformFunctionResponse, error)
	GetTransformFunctions(context.Context, *GetTransformFunctionsRequest) (*GetTransformFunctionsResponse, error)
	UpdateExtractRule(context.Context, *UpdateExtractRuleRequest) (*UpdateExtractRuleResponse, error)
	DeleteExtractRule(context.Context, *DeleteExtractRuleRequest) (*DeleteExtractRuleResponse, error)
	CreateExtractRule(context.Context, *CreateExtractRuleRequest) (*CreateExtractRuleResponse, error)
	GetExtractRule(context.Context, *GetExtractRuleRequest) (*GetExtractRuleResponse, error)
	GetExtractRules(context.Context, *GetExtractRulesRequest) (*GetExtractRulesResponse, error)
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*UpdateExtensionResponse, error)
	DeleteExtension(context.Context, *DeleteExtensionRequest) (*DeleteExtensionResponse, error)
	CreateExtension(context.Context, *CreateExtensionRequest) (*CreateExtensionResponse, error)
	GetExtension(context.Context, *GetExtensionRequest) (*GetExtensionResponse, error)
	GetExtensions(context.Context, *GetExtensionsRequest) (*GetExtensionsResponse, error)
	UpdateExtractSource(context.Context, *UpdateExtractSourceRequest) (*UpdateExtractSourceResponse, error)
	DeleteExtractSource(context.Context, *DeleteExtractSourceRequest) (*DeleteExtractSourceResponse, error)
	GetExtractSource(context.Context, *GetExtractSourceRequest) (*GetExtractSourceResponse, error)
	GetExtractSources(context.Context, *GetExtractSourcesRequest) (*GetExtractSourcesResponse, error)
	CreateExtractSource(context.Context, *CreateExtractSourceRequest) (*CreateExtractSourceResponse, error)
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	GetPipelineStatus(context.Context, *GetPipelineStatusRequest) (*GetPipelineStatusResponse, error)
	DeleteJobs(context.Context, *DeleteJobsRequest) (*DeleteJobsResponse, error)
	GetPipelineJobLog(context.Context, *GetPipelineJobLogRequest) (*GetPipelineJobLogResponse, error)
	GetExtractData(context.Context, *GetExtractDataRequest) (*GetExtractDataResponse, error)
}

// UnimplementedCtlServer should be embedded to have forward compatible implementations.
type UnimplementedCtlServer struct {
}

func (UnimplementedCtlServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCtlServer) CreateTransformFunction(context.Context, *CreateTransformFunctionRequest) (*CreateTransformFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransformFunction not implemented")
}
func (UnimplementedCtlServer) DeleteTransformFunction(context.Context, *DeleteTransformFunctionRequest) (*DeleteTransformFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransformFunction not implemented")
}
func (UnimplementedCtlServer) UpdateTransformFunction(context.Context, *UpdateTransformFunctionRequest) (*UpdateTransformFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransformFunction not implemented")
}
func (UnimplementedCtlServer) GetTransformFunction(context.Context, *GetTransformFunctionRequest) (*GetTransformFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformFunction not implemented")
}
func (UnimplementedCtlServer) GetTransformFunctions(context.Context, *GetTransformFunctionsRequest) (*GetTransformFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformFunctions not implemented")
}
func (UnimplementedCtlServer) UpdateExtractRule(context.Context, *UpdateExtractRuleRequest) (*UpdateExtractRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtractRule not implemented")
}
func (UnimplementedCtlServer) DeleteExtractRule(context.Context, *DeleteExtractRuleRequest) (*DeleteExtractRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtractRule not implemented")
}
func (UnimplementedCtlServer) CreateExtractRule(context.Context, *CreateExtractRuleRequest) (*CreateExtractRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtractRule not implemented")
}
func (UnimplementedCtlServer) GetExtractRule(context.Context, *GetExtractRuleRequest) (*GetExtractRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractRule not implemented")
}
func (UnimplementedCtlServer) GetExtractRules(context.Context, *GetExtractRulesRequest) (*GetExtractRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractRules not implemented")
}
func (UnimplementedCtlServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*UpdateExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedCtlServer) DeleteExtension(context.Context, *DeleteExtensionRequest) (*DeleteExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtension not implemented")
}
func (UnimplementedCtlServer) CreateExtension(context.Context, *CreateExtensionRequest) (*CreateExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtension not implemented")
}
func (UnimplementedCtlServer) GetExtension(context.Context, *GetExtensionRequest) (*GetExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (UnimplementedCtlServer) GetExtensions(context.Context, *GetExtensionsRequest) (*GetExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtensions not implemented")
}
func (UnimplementedCtlServer) UpdateExtractSource(context.Context, *UpdateExtractSourceRequest) (*UpdateExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtractSource not implemented")
}
func (UnimplementedCtlServer) DeleteExtractSource(context.Context, *DeleteExtractSourceRequest) (*DeleteExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtractSource not implemented")
}
func (UnimplementedCtlServer) GetExtractSource(context.Context, *GetExtractSourceRequest) (*GetExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractSource not implemented")
}
func (UnimplementedCtlServer) GetExtractSources(context.Context, *GetExtractSourcesRequest) (*GetExtractSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractSources not implemented")
}
func (UnimplementedCtlServer) CreateExtractSource(context.Context, *CreateExtractSourceRequest) (*CreateExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtractSource not implemented")
}
func (UnimplementedCtlServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedCtlServer) GetPipelineStatus(context.Context, *GetPipelineStatusRequest) (*GetPipelineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineStatus not implemented")
}
func (UnimplementedCtlServer) DeleteJobs(context.Context, *DeleteJobsRequest) (*DeleteJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobs not implemented")
}
func (UnimplementedCtlServer) GetPipelineJobLog(context.Context, *GetPipelineJobLogRequest) (*GetPipelineJobLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineJobLog not implemented")
}
func (UnimplementedCtlServer) GetExtractData(context.Context, *GetExtractDataRequest) (*GetExtractDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractData not implemented")
}

// UnsafeCtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CtlServer will
// result in compilation errors.
type UnsafeCtlServer interface {
	mustEmbedUnimplementedCtlServer()
}

func RegisterCtlServer(s grpc.ServiceRegistrar, srv CtlServer) {
	s.RegisterService(&Ctl_ServiceDesc, srv)
}

func _Ctl_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_CreateTransformFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransformFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).CreateTransformFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/CreateTransformFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).CreateTransformFunction(ctx, req.(*CreateTransformFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_DeleteTransformFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransformFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).DeleteTransformFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/DeleteTransformFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).DeleteTransformFunction(ctx, req.(*DeleteTransformFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_UpdateTransformFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransformFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).UpdateTransformFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/UpdateTransformFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).UpdateTransformFunction(ctx, req.(*UpdateTransformFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetTransformFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetTransformFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetTransformFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetTransformFunction(ctx, req.(*GetTransformFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetTransformFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetTransformFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetTransformFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetTransformFunctions(ctx, req.(*GetTransformFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_UpdateExtractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtractRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).UpdateExtractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/UpdateExtractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).UpdateExtractRule(ctx, req.(*UpdateExtractRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_DeleteExtractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtractRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).DeleteExtractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/DeleteExtractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).DeleteExtractRule(ctx, req.(*DeleteExtractRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_CreateExtractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtractRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).CreateExtractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/CreateExtractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).CreateExtractRule(ctx, req.(*CreateExtractRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtractRule(ctx, req.(*GetExtractRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtractRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtractRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtractRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtractRules(ctx, req.(*GetExtractRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/UpdateExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_DeleteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).DeleteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/DeleteExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).DeleteExtension(ctx, req.(*DeleteExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_CreateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).CreateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/CreateExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).CreateExtension(ctx, req.(*CreateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtensions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtensions(ctx, req.(*GetExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_UpdateExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).UpdateExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/UpdateExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).UpdateExtractSource(ctx, req.(*UpdateExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_DeleteExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).DeleteExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/DeleteExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).DeleteExtractSource(ctx, req.(*DeleteExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtractSource(ctx, req.(*GetExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtractSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtractSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtractSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtractSources(ctx, req.(*GetExtractSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_CreateExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).CreateExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/CreateExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).CreateExtractSource(ctx, req.(*CreateExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetPipelineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetPipelineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetPipelineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetPipelineStatus(ctx, req.(*GetPipelineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_DeleteJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).DeleteJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/DeleteJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).DeleteJobs(ctx, req.(*DeleteJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetPipelineJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineJobLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetPipelineJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetPipelineJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetPipelineJobLog(ctx, req.(*GetPipelineJobLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctl_GetExtractData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtlServer).GetExtractData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.Ctl/GetExtractData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtlServer).GetExtractData(ctx, req.(*GetExtractDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ctl_ServiceDesc is the grpc.ServiceDesc for Ctl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ctl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctl.Ctl",
	HandlerType: (*CtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Ctl_Ping_Handler,
		},
		{
			MethodName: "CreateTransformFunction",
			Handler:    _Ctl_CreateTransformFunction_Handler,
		},
		{
			MethodName: "DeleteTransformFunction",
			Handler:    _Ctl_DeleteTransformFunction_Handler,
		},
		{
			MethodName: "UpdateTransformFunction",
			Handler:    _Ctl_UpdateTransformFunction_Handler,
		},
		{
			MethodName: "GetTransformFunction",
			Handler:    _Ctl_GetTransformFunction_Handler,
		},
		{
			MethodName: "GetTransformFunctions",
			Handler:    _Ctl_GetTransformFunctions_Handler,
		},
		{
			MethodName: "UpdateExtractRule",
			Handler:    _Ctl_UpdateExtractRule_Handler,
		},
		{
			MethodName: "DeleteExtractRule",
			Handler:    _Ctl_DeleteExtractRule_Handler,
		},
		{
			MethodName: "CreateExtractRule",
			Handler:    _Ctl_CreateExtractRule_Handler,
		},
		{
			MethodName: "GetExtractRule",
			Handler:    _Ctl_GetExtractRule_Handler,
		},
		{
			MethodName: "GetExtractRules",
			Handler:    _Ctl_GetExtractRules_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _Ctl_UpdateExtension_Handler,
		},
		{
			MethodName: "DeleteExtension",
			Handler:    _Ctl_DeleteExtension_Handler,
		},
		{
			MethodName: "CreateExtension",
			Handler:    _Ctl_CreateExtension_Handler,
		},
		{
			MethodName: "GetExtension",
			Handler:    _Ctl_GetExtension_Handler,
		},
		{
			MethodName: "GetExtensions",
			Handler:    _Ctl_GetExtensions_Handler,
		},
		{
			MethodName: "UpdateExtractSource",
			Handler:    _Ctl_UpdateExtractSource_Handler,
		},
		{
			MethodName: "DeleteExtractSource",
			Handler:    _Ctl_DeleteExtractSource_Handler,
		},
		{
			MethodName: "GetExtractSource",
			Handler:    _Ctl_GetExtractSource_Handler,
		},
		{
			MethodName: "GetExtractSources",
			Handler:    _Ctl_GetExtractSources_Handler,
		},
		{
			MethodName: "CreateExtractSource",
			Handler:    _Ctl_CreateExtractSource_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _Ctl_GetPipeline_Handler,
		},
		{
			MethodName: "GetPipelineStatus",
			Handler:    _Ctl_GetPipelineStatus_Handler,
		},
		{
			MethodName: "DeleteJobs",
			Handler:    _Ctl_DeleteJobs_Handler,
		},
		{
			MethodName: "GetPipelineJobLog",
			Handler:    _Ctl_GetPipelineJobLog_Handler,
		},
		{
			MethodName: "GetExtractData",
			Handler:    _Ctl_GetExtractData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ctl/ctl.proto",
}
