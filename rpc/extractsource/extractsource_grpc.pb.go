// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package extractsource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtractSourceClient is the client API for ExtractSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtractSourceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateExtractSource(ctx context.Context, in *CreateExtractSourceRequest, opts ...grpc.CallOption) (*CreateExtractSourceResponse, error)
	DeleteExtractSource(ctx context.Context, in *DeleteExtractSourceRequest, opts ...grpc.CallOption) (*DeleteExtractSourceResponse, error)
	UploadToExtractSource(ctx context.Context, opts ...grpc.CallOption) (ExtractSource_UploadToExtractSourceClient, error)
	UploadByURL(ctx context.Context, in *UploadByURLRequest, opts ...grpc.CallOption) (*UploadByURLResponse, error)
	StartAPI(ctx context.Context, in *StartAPIRequest, opts ...grpc.CallOption) (*StartAPIResponse, error)
	StopAPI(ctx context.Context, in *StopAPIRequest, opts ...grpc.CallOption) (*StopAPIResponse, error)
}

type extractSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtractSourceClient(cc grpc.ClientConnInterface) ExtractSourceClient {
	return &extractSourceClient{cc}
}

func (c *extractSourceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractSourceClient) CreateExtractSource(ctx context.Context, in *CreateExtractSourceRequest, opts ...grpc.CallOption) (*CreateExtractSourceResponse, error) {
	out := new(CreateExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/CreateExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractSourceClient) DeleteExtractSource(ctx context.Context, in *DeleteExtractSourceRequest, opts ...grpc.CallOption) (*DeleteExtractSourceResponse, error) {
	out := new(DeleteExtractSourceResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/DeleteExtractSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractSourceClient) UploadToExtractSource(ctx context.Context, opts ...grpc.CallOption) (ExtractSource_UploadToExtractSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExtractSource_ServiceDesc.Streams[0], "/extractsource.ExtractSource/UploadToExtractSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &extractSourceUploadToExtractSourceClient{stream}
	return x, nil
}

type ExtractSource_UploadToExtractSourceClient interface {
	Send(*UploadToExtractSourceRequest) error
	CloseAndRecv() (*UploadToExtractSourceResponse, error)
	grpc.ClientStream
}

type extractSourceUploadToExtractSourceClient struct {
	grpc.ClientStream
}

func (x *extractSourceUploadToExtractSourceClient) Send(m *UploadToExtractSourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extractSourceUploadToExtractSourceClient) CloseAndRecv() (*UploadToExtractSourceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadToExtractSourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extractSourceClient) UploadByURL(ctx context.Context, in *UploadByURLRequest, opts ...grpc.CallOption) (*UploadByURLResponse, error) {
	out := new(UploadByURLResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/UploadByURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractSourceClient) StartAPI(ctx context.Context, in *StartAPIRequest, opts ...grpc.CallOption) (*StartAPIResponse, error) {
	out := new(StartAPIResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/StartAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractSourceClient) StopAPI(ctx context.Context, in *StopAPIRequest, opts ...grpc.CallOption) (*StopAPIResponse, error) {
	out := new(StopAPIResponse)
	err := c.cc.Invoke(ctx, "/extractsource.ExtractSource/StopAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractSourceServer is the server API for ExtractSource service.
// All implementations should embed UnimplementedExtractSourceServer
// for forward compatibility
type ExtractSourceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateExtractSource(context.Context, *CreateExtractSourceRequest) (*CreateExtractSourceResponse, error)
	DeleteExtractSource(context.Context, *DeleteExtractSourceRequest) (*DeleteExtractSourceResponse, error)
	UploadToExtractSource(ExtractSource_UploadToExtractSourceServer) error
	UploadByURL(context.Context, *UploadByURLRequest) (*UploadByURLResponse, error)
	StartAPI(context.Context, *StartAPIRequest) (*StartAPIResponse, error)
	StopAPI(context.Context, *StopAPIRequest) (*StopAPIResponse, error)
}

// UnimplementedExtractSourceServer should be embedded to have forward compatible implementations.
type UnimplementedExtractSourceServer struct {
}

func (UnimplementedExtractSourceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExtractSourceServer) CreateExtractSource(context.Context, *CreateExtractSourceRequest) (*CreateExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtractSource not implemented")
}
func (UnimplementedExtractSourceServer) DeleteExtractSource(context.Context, *DeleteExtractSourceRequest) (*DeleteExtractSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtractSource not implemented")
}
func (UnimplementedExtractSourceServer) UploadToExtractSource(ExtractSource_UploadToExtractSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadToExtractSource not implemented")
}
func (UnimplementedExtractSourceServer) UploadByURL(context.Context, *UploadByURLRequest) (*UploadByURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadByURL not implemented")
}
func (UnimplementedExtractSourceServer) StartAPI(context.Context, *StartAPIRequest) (*StartAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAPI not implemented")
}
func (UnimplementedExtractSourceServer) StopAPI(context.Context, *StopAPIRequest) (*StopAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAPI not implemented")
}

// UnsafeExtractSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtractSourceServer will
// result in compilation errors.
type UnsafeExtractSourceServer interface {
	mustEmbedUnimplementedExtractSourceServer()
}

func RegisterExtractSourceServer(s grpc.ServiceRegistrar, srv ExtractSourceServer) {
	s.RegisterService(&ExtractSource_ServiceDesc, srv)
}

func _ExtractSource_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractSource_CreateExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).CreateExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/CreateExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).CreateExtractSource(ctx, req.(*CreateExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractSource_DeleteExtractSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtractSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).DeleteExtractSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/DeleteExtractSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).DeleteExtractSource(ctx, req.(*DeleteExtractSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractSource_UploadToExtractSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtractSourceServer).UploadToExtractSource(&extractSourceUploadToExtractSourceServer{stream})
}

type ExtractSource_UploadToExtractSourceServer interface {
	SendAndClose(*UploadToExtractSourceResponse) error
	Recv() (*UploadToExtractSourceRequest, error)
	grpc.ServerStream
}

type extractSourceUploadToExtractSourceServer struct {
	grpc.ServerStream
}

func (x *extractSourceUploadToExtractSourceServer) SendAndClose(m *UploadToExtractSourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extractSourceUploadToExtractSourceServer) Recv() (*UploadToExtractSourceRequest, error) {
	m := new(UploadToExtractSourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtractSource_UploadByURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadByURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).UploadByURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/UploadByURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).UploadByURL(ctx, req.(*UploadByURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractSource_StartAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).StartAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/StartAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).StartAPI(ctx, req.(*StartAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractSource_StopAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractSourceServer).StopAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extractsource.ExtractSource/StopAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractSourceServer).StopAPI(ctx, req.(*StopAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtractSource_ServiceDesc is the grpc.ServiceDesc for ExtractSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtractSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extractsource.ExtractSource",
	HandlerType: (*ExtractSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExtractSource_Ping_Handler,
		},
		{
			MethodName: "CreateExtractSource",
			Handler:    _ExtractSource_CreateExtractSource_Handler,
		},
		{
			MethodName: "DeleteExtractSource",
			Handler:    _ExtractSource_DeleteExtractSource_Handler,
		},
		{
			MethodName: "UploadByURL",
			Handler:    _ExtractSource_UploadByURL_Handler,
		},
		{
			MethodName: "StartAPI",
			Handler:    _ExtractSource_StartAPI_Handler,
		},
		{
			MethodName: "StopAPI",
			Handler:    _ExtractSource_StopAPI_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadToExtractSource",
			Handler:       _ExtractSource_UploadToExtractSource_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/extractsource/extractsource.proto",
}
